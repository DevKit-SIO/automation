{
  "id": 7654,
  "name": "ETL : Extraire et analyser les donn√©es du mod√®le Revit vers Excel structur√©",
  "totalViews": 80,
  "price": 0,
  "purchaseUrl": null,
  "user": {
    "name": "Artem Boiko",
    "username": "datadrivenconstruction",
    "bio": "Founder DataDrivenConstruction.io | AEC Tech Consultant & Automation Expert | Bridging Software and Construction",
    "verified": true,
    "links": [
      "https://datadrivenconstruction.io/"
    ],
    "avatar": "https://gravatar.com/avatar/96a88b84c9f49338945054d2393a04a29e434a2b60a8937de78e6ef9a6305b5f?r=pg&d=retro&size=200"
  },
  "description": "Convertir un **mod√®le Revit** en **Excel** et l'analyser en √©l√©ments structur√©s pr√™ts pour l'ETL en aval.\nCe mod√®le minimal ex√©cute un `RvtExporter.exe` local, v√©rifie le succ√®s, d√©rive le nom de fichier attendu `*_rvt.xlsx`, le lit depuis le disque et l'analyse en √©l√©ments de donn√©es dans n8n.\n\n## Ce que cela fait\n1. **Configuration** : d√©finir `path_to_revit_converter` et `revit_file`.\n2. **Ex√©cuter le convertisseur** : ex√©cuter `RvtExporter.exe \"&lt;converter&gt;\" \"&lt;revit_file&gt;\"` (√©crit `*_rvt.xlsx` √† c√¥t√© du RVT).\n3. **V√©rifier le succ√®s** : se ramifier sur la sortie d'erreur du convertisseur.\n4. **Lire Excel** : calculer `&lt;revit_file&gt; ‚Üí *_rvt.xlsx` et le lire depuis le disque.\n5. **Analyser** : convertir le classeur en √©l√©ments structur√©s (lignes ‚Üí √©l√©ments).\n\n## Pr√©requis\n- H√¥te **Windows** (ex√©cutable local et chemins de syst√®me de fichiers).\n- Kit d'outils DDC Revit install√© : `C:\\\\DDC_Converter_Revit\\\\datadrivenlibs\\\\RvtExporter.exe`.\n- Un `.rvt` local que vous pouvez lire ; le convertisseur √©crira `*_rvt.xlsx` √† c√¥t√© de celui-ci.\n\n## Comment utiliser\n1. **Importer** ce JSON dans n8n.\n2. Ouvrir **‚ÄúConfiguration ‚Äì D√©finir les chemins de fichiers‚Äù** et d√©finir :\n   - `path_to_revit_converter` : `C:\\\\DDC_Converter_Revit\\\\datadrivenlibs\\\\RvtExporter.exe`\n   - `revit_file` : par exemple, `C:\\\\Sample_Projects\\\\your_project.rvt`\n3. Ex√©cuter **D√©clencheur manuel**.\n4. En cas de succ√®s, le flux lira `*_rvt.xlsx` et √©mettra des √©l√©ments analys√©s.\n\n## Sorties\n- Sur disque : `&lt;YourProject&gt;_rvt.xlsx` (cr√©√© par le convertisseur).\n- Dans n8n : lignes analys√©es en tant qu'√©l√©ments, pr√™tes pour les phases **Transformation**/**Chargement**.\n\n## Remarques et conseils\n- Si votre convertisseur √©crit l'Excel dans un **dossier/nouveau nom de fichier diff√©rent**, mettez √† jour le n≈ìud ‚Äú**Succ√®s ‚Äì Cr√©er le nom de fichier Excel**‚Äù pour pointer vers le chemin r√©el.\n- Assurez-vous d'avoir les permissions d'√©criture dans le dossier du projet et √©vitez les caract√®res non-ASCII dans les chemins lorsque cela est possible.\n- Ce mod√®le est d√©lib√©r√©ment minimal (Extraction uniquement). Cha√Ænez-le avec vos propres √©tapes de **Transformation**/**Chargement**.\n\n## Cat√©gories\nExtraction de donn√©es ¬∑ Fichiers et stockage ¬∑ ETL ¬∑ CAD/BIM\n\n## √âtiquettes\n`cad-bim`, `revit`, `ifc`, `dwg`, `extraire`, `xlsx`, `etl`\n\n## Auteur\n [DataDrivenConstruction.io ](https://DataDrivenConstruction.io )\n [info@datadrivenconstruction.io](mailto:info@datadrivenconstruction.io)\n\n\n## Consulting et Formation\nNous travaillons avec des agences de construction, d'ing√©nierie, de conseil et des entreprises technologiques de premier plan dans le monde entier pour les aider √† mettre en ≈ìuvre des principes de donn√©es ouvertes, √† automatiser le traitement CAD/BIM et √† construire des pipelines ETL robustes.\n\nSi vous souhaitez tester cette solution avec vos propres donn√©es, ou si vous √™tes int√©ress√© par l'adaptation du flux de travail √† des t√¢ches de projet r√©elles, n'h√©sitez pas √† nous contacter.\n\n\n**Docs & Probl√®mes :**  \n  [Lireme complet sur GitHub](https://github.com/datadrivenconstruction/cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto)",
  "createdAt": "2025-08-20T15:34:09.918Z",
  "nodes": [
    {
      "id": 13,
      "icon": "fa:terminal",
      "name": "n8n-nodes-base.executeCommand",
      "codex": {
        "data": {
          "alias": [
            "Shell",
            "Command",
            "OS",
            "Bash"
          ],
          "details": "Execute command allows you to run terminal commands on the computer/server hosting your n8n instance. Useful for executing a shell script or interacting with your n8n instance programmatically via the CLI.",
          "resources": {
            "generic": [
              {
                "url": "https://n8n.io/blog/how-uproc-scraped-a-multi-page-website-with-a-low-code-workflow/",
                "icon": " üï∏Ô∏è",
                "label": "How uProc scraped a multi-page website with a low-code workflow"
              },
              {
                "url": "https://n8n.io/blog/why-this-product-manager-loves-workflow-automation-with-n8n/",
                "icon": "üß†",
                "label": "Why this Product Manager loves workflow automation with n8n"
              }
            ],
            "primaryDocumentation": [
              {
                "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executecommand/"
              }
            ]
          },
          "categories": [
            "Development",
            "Core Nodes"
          ],
          "nodeVersion": "1.0",
          "codexVersion": "1.0",
          "subcategories": {
            "Core Nodes": [
              "Helpers"
            ]
          }
        }
      },
      "group": "[\"transform\"]",
      "defaults": {
        "name": "Ex√©cuter la commande",
        "color": "#886644"
      },
      "iconData": {
        "icon": "terminal",
        "type": "icon"
      },
      "displayName": "Execute Command",
      "typeVersion": 1,
      "nodeCategories": [
        {
          "id": 5,
          "name": "Development"
        },
        {
          "id": 9,
          "name": "Core Nodes"
        }
      ]
    },
    {
      "id": 20,
      "icon": "fa:map-signs",
      "name": "n8n-nodes-base.if",
      "codex": {
        "data": {
          "alias": [
            "Router",
            "Filter",
            "Condition",
            "Logic",
            "Boolean",
            "Branch"
          ],
          "details": "The IF node can be used to implement binary conditional logic in your workflow. You can set up one-to-many conditions to evaluate each item of data being inputted into the node. That data will either evaluate to TRUE or FALSE and route out of the node accordingly.\n\nThis node has multiple types of conditions: Bool, String, Number, and Date & Time.",
          "resources": {
            "generic": [
              {
                "url": "https://n8n.io/blog/learn-to-automate-your-factorys-incident-reporting-a-step-by-step-guide/",
                "icon": "üè≠",
                "label": "Learn to Automate Your Factory's Incident Reporting: A Step by Step Guide"
              },
              {
                "url": "https://n8n.io/blog/2021-the-year-to-automate-the-new-you-with-n8n/",
                "icon": "‚òÄÔ∏è",
                "label": "2021: The Year to Automate the New You with n8n"
              },
              {
                "url": "https://n8n.io/blog/why-business-process-automation-with-n8n-can-change-your-daily-life/",
                "icon": "üß¨",
                "label": "Why business process automation with n8n can change your daily life"
              },
              {
                "url": "https://n8n.io/blog/create-a-toxic-language-detector-for-telegram/",
                "icon": "ü§¨",
                "label": "Create a toxic language detector for Telegram in 4 step"
              },
              {
                "url": "https://n8n.io/blog/no-code-ecommerce-workflow-automations/",
                "icon": "store",
                "label": "6 e-commerce workflows to power up your Shopify s"
              },
              {
                "url": "https://n8n.io/blog/how-to-build-a-low-code-self-hosted-url-shortener/",
                "icon": "üîó",
                "label": "How to build a low-code, self-hosted URL shortener in 3 steps"
              },
              {
                "url": "https://n8n.io/blog/automate-your-data-processing-pipeline-in-9-steps-with-n8n/",
                "icon": "‚öôÔ∏è",
                "label": "Automate your data processing pipeline in 9 steps"
              },
              {
                "url": "https://n8n.io/blog/how-to-get-started-with-crm-automation-and-no-code-workflow-ideas/",
                "icon": "üë•",
                "label": "How to get started with CRM automation (with 3 no-code workflow ideas"
              },
              {
                "url": "https://n8n.io/blog/5-tasks-you-can-automate-with-notion-api/",
                "icon": "‚ö°Ô∏è",
                "label": "5 tasks you can automate with the new Notion API "
              },
              {
                "url": "https://n8n.io/blog/automate-google-apps-for-productivity/",
                "icon": "üí°",
                "label": "15 Google apps you can combine and automate to increase productivity"
              },
              {
                "url": "https://n8n.io/blog/automation-for-maintainers-of-open-source-projects/",
                "icon": "üè∑Ô∏è",
                "label": "How to automatically manage contributions to open-source projects"
              },
              {
                "url": "https://n8n.io/blog/how-uproc-scraped-a-multi-page-website-with-a-low-code-workflow/",
                "icon": " üï∏Ô∏è",
                "label": "How uProc scraped a multi-page website with a low-code workflow"
              },
              {
                "url": "https://n8n.io/blog/5-workflow-automations-for-mattermost-that-we-love-at-n8n/",
                "icon": "ü§ñ",
                "label": "5 workflow automations for Mattermost that we love at n8n"
              },
              {
                "url": "https://n8n.io/blog/why-this-product-manager-loves-workflow-automation-with-n8n/",
                "icon": "üß†",
                "label": "Why this Product Manager loves workflow automation with n8n"
              },
              {
                "url": "https://n8n.io/blog/sending-automated-congratulations-with-google-sheets-twilio-and-n8n/",
                "icon": "üôå",
                "label": "Sending Automated Congratulations with Google Sheets, Twilio, and n8n "
              },
              {
                "url": "https://n8n.io/blog/how-to-set-up-a-ci-cd-pipeline-with-no-code/",
                "icon": "üé°",
                "label": "How to set up a no-code CI/CD pipeline with GitHub and TravisCI"
              },
              {
                "url": "https://n8n.io/blog/benefits-of-automation-and-n8n-an-interview-with-hubspots-hugh-durkin/",
                "icon": "üéñ",
                "label": "Benefits of automation and n8n: An interview with HubSpot's Hugh Durkin"
              },
              {
                "url": "https://n8n.io/blog/aws-workflow-automation/",
                "label": "7 no-code workflow automations for Amazon Web Services"
              }
            ],
            "primaryDocumentation": [
              {
                "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.if/"
              }
            ]
          },
          "categories": [
            "Core Nodes"
          ],
          "nodeVersion": "1.0",
          "codexVersion": "1.0",
          "subcategories": {
            "Core Nodes": [
              "Flow"
            ]
          }
        }
      },
      "group": "[\"transform\"]",
      "defaults": {
        "name": "Si",
        "color": "#408000"
      },
      "iconData": {
        "icon": "map-signs",
        "type": "icon"
      },
      "displayName": "If",
      "typeVersion": 2,
      "nodeCategories": [
        {
          "id": 9,
          "name": "Core Nodes"
        }
      ]
    },
    {
      "id": 31,
      "icon": "fa:file-import",
      "name": "n8n-nodes-base.readBinaryFile",
      "codex": {
        "data": {
          "alias": [
            "Text",
            "Open",
            "Import"
          ],
          "resources": {
            "generic": [
              {
                "url": "https://n8n.io/blog/build-your-own-virtual-assistant-with-n8n-a-step-by-step-guide/",
                "icon": "üë¶",
                "label": "Build your own virtual assistant with n8n: A step by step guide"
              },
              {
                "url": "https://n8n.io/blog/how-uproc-scraped-a-multi-page-website-with-a-low-code-workflow/",
                "icon": " üï∏Ô∏è",
                "label": "How uProc scraped a multi-page website with a low-code workflow"
              },
              {
                "url": "https://n8n.io/blog/how-to-use-the-http-request-node-the-swiss-army-knife-for-workflow-automation/",
                "icon": "üß∞",
                "label": "How to use the HTTP Request Node - The Swiss Army Knife for Workflow Automation"
              }
            ],
            "primaryDocumentation": [
              {
                "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.readwritefile/"
              }
            ]
          },
          "categories": [
            "Core Nodes"
          ],
          "nodeVersion": "1.0",
          "codexVersion": "1.0",
          "subcategories": {
            "Core Nodes": [
              "Files"
            ]
          }
        }
      },
      "group": "[\"input\"]",
      "defaults": {
        "name": "Lire le fichier binaire",
        "color": "#449922"
      },
      "iconData": {
        "icon": "file-import",
        "type": "icon"
      },
      "displayName": "Read Binary File",
      "typeVersion": 1,
      "nodeCategories": [
        {
          "id": 9,
          "name": "Core Nodes"
        }
      ]
    },
    {
      "id": 38,
      "icon": "fa:pen",
      "name": "n8n-nodes-base.set",
      "codex": {
        "data": {
          "alias": [
            "Set",
            "JS",
            "JSON",
            "Filter",
            "Transform",
            "Map"
          ],
          "resources": {
            "generic": [
              {
                "url": "https://n8n.io/blog/learn-to-automate-your-factorys-incident-reporting-a-step-by-step-guide/",
                "icon": "üè≠",
                "label": "Learn to Automate Your Factory's Incident Reporting: A Step by Step Guide"
              },
              {
                "url": "https://n8n.io/blog/2021-the-year-to-automate-the-new-you-with-n8n/",
                "icon": "‚òÄÔ∏è",
                "label": "2021: The Year to Automate the New You with n8n"
              },
              {
                "url": "https://n8n.io/blog/automatically-pulling-and-visualizing-data-with-n8n/",
                "icon": "üìà",
                "label": "Automatically pulling and visualizing data with n8n"
              },
              {
                "url": "https://n8n.io/blog/database-monitoring-and-alerting-with-n8n/",
                "icon": "üì°",
                "label": "Database Monitoring and Alerting with n8n"
              },
              {
                "url": "https://n8n.io/blog/automatically-adding-expense-receipts-to-google-sheets-with-telegram-mindee-twilio-and-n8n/",
                "icon": "üßæ",
                "label": "Automatically Adding Expense Receipts to Google Sheets with Telegram, Mindee, Twilio, and n8n"
              },
              {
                "url": "https://n8n.io/blog/no-code-ecommerce-workflow-automations/",
                "icon": "store",
                "label": "6 e-commerce workflows to power up your Shopify s"
              },
              {
                "url": "https://n8n.io/blog/how-to-build-a-low-code-self-hosted-url-shortener/",
                "icon": "üîó",
                "label": "How to build a low-code, self-hosted URL shortener in 3 steps"
              },
              {
                "url": "https://n8n.io/blog/automate-your-data-processing-pipeline-in-9-steps-with-n8n/",
                "icon": "‚öôÔ∏è",
                "label": "Automate your data processing pipeline in 9 steps"
              },
              {
                "url": "https://n8n.io/blog/how-to-get-started-with-crm-automation-and-no-code-workflow-ideas/",
                "icon": "üë•",
                "label": "How to get started with CRM automation (with 3 no-code workflow ideas"
              },
              {
                "url": "https://n8n.io/blog/5-tasks-you-can-automate-with-notion-api/",
                "icon": "‚ö°Ô∏è",
                "label": "5 tasks you can automate with the new Notion API "
              },
              {
                "url": "https://n8n.io/blog/automate-google-apps-for-productivity/",
                "icon": "üí°",
                "label": "15 Google apps you can combine and automate to increase productivity"
              },
              {
                "url": "https://n8n.io/blog/how-uproc-scraped-a-multi-page-website-with-a-low-code-workflow/",
                "icon": " üï∏Ô∏è",
                "label": "How uProc scraped a multi-page website with a low-code workflow"
              },
              {
                "url": "https://n8n.io/blog/building-an-expense-tracking-app-in-10-minutes/",
                "icon": "üì±",
                "label": "Building an expense tracking app in 10 minutes"
              },
              {
                "url": "https://n8n.io/blog/the-ultimate-guide-to-automate-your-video-collaboration-with-whereby-mattermost-and-n8n/",
                "icon": "üìπ",
                "label": "The ultimate guide to automate your video collaboration with Whereby, Mattermost, and n8n"
              },
              {
                "url": "https://n8n.io/blog/5-workflow-automations-for-mattermost-that-we-love-at-n8n/",
                "icon": "ü§ñ",
                "label": "5 workflow automations for Mattermost that we love at n8n"
              },
              {
                "url": "https://n8n.io/blog/learn-to-build-powerful-api-endpoints-using-webhooks/",
                "icon": "üß∞",
                "label": "Learn to Build Powerful API Endpoints Using Webhooks"
              },
              {
                "url": "https://n8n.io/blog/how-a-membership-development-manager-automates-his-work-and-investments/",
                "icon": "üìà",
                "label": "How a Membership Development Manager automates his work and investments"
              },
              {
                "url": "https://n8n.io/blog/a-low-code-bitcoin-ticker-built-with-questdb-and-n8n-io/",
                "icon": "üìà",
                "label": "A low-code bitcoin ticker built with QuestDB and n8n.io"
              },
              {
                "url": "https://n8n.io/blog/how-to-set-up-a-ci-cd-pipeline-with-no-code/",
                "icon": "üé°",
                "label": "How to set up a no-code CI/CD pipeline with GitHub and TravisCI"
              },
              {
                "url": "https://n8n.io/blog/benefits-of-automation-and-n8n-an-interview-with-hubspots-hugh-durkin/",
                "icon": "üéñ",
                "label": "Benefits of automation and n8n: An interview with HubSpot's Hugh Durkin"
              },
              {
                "url": "https://n8n.io/blog/how-goomer-automated-their-operations-with-over-200-n8n-workflows/",
                "icon": "üõµ",
                "label": "How Goomer automated their operations with over 200 n8n workflows"
              },
              {
                "url": "https://n8n.io/blog/aws-workflow-automation/",
                "label": "7 no-code workflow automations for Amazon Web Services"
              }
            ],
            "primaryDocumentation": [
              {
                "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/"
              }
            ]
          },
          "categories": [
            "Core Nodes"
          ],
          "nodeVersion": "1.0",
          "codexVersion": "1.0",
          "subcategories": {
            "Core Nodes": [
              "Data Transformation"
            ]
          }
        }
      },
      "group": "[\"input\"]",
      "defaults": {
        "name": "Modifier les champs"
      },
      "iconData": {
        "icon": "pen",
        "type": "icon"
      },
      "displayName": "Edit Fields (Set)",
      "typeVersion": 3,
      "nodeCategories": [
        {
          "id": 9,
          "name": "Core Nodes"
        }
      ]
    },
    {
      "id": 41,
      "icon": "fa:table",
      "name": "n8n-nodes-base.spreadsheetFile",
      "codex": {
        "data": {
          "alias": [
            "_Excel",
            "Excel",
            "CSV",
            "Sheet",
            "Spreadsheet",
            "xls",
            "xlsx",
            "ods"
          ],
          "resources": {
            "generic": [
              {
                "url": "https://n8n.io/blog/build-your-own-virtual-assistant-with-n8n-a-step-by-step-guide/",
                "icon": "üë¶",
                "label": "Build your own virtual assistant with n8n: A step by step guide"
              }
            ],
            "primaryDocumentation": [
              {
                "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.converttofile/"
              }
            ]
          },
          "categories": [
            "Data & Storage",
            "Core Nodes"
          ],
          "nodeVersion": "1.0",
          "codexVersion": "1.0",
          "subcategories": {
            "Core Nodes": [
              "Files"
            ]
          }
        }
      },
      "group": "[\"transform\"]",
      "defaults": {
        "name": "Fichier tableur",
        "color": "#2244FF"
      },
      "iconData": {
        "icon": "table",
        "type": "icon"
      },
      "displayName": "Spreadsheet File",
      "typeVersion": 2,
      "nodeCategories": [
        {
          "id": 3,
          "name": "Data & Storage"
        },
        {
          "id": 9,
          "name": "Core Nodes"
        }
      ]
    },
    {
      "id": 565,
      "icon": "fa:sticky-note",
      "name": "n8n-nodes-base.stickyNote",
      "codex": {
        "data": {
          "alias": [
            "Comments",
            "Notes",
            "Sticky"
          ],
          "categories": [
            "Core Nodes"
          ],
          "nodeVersion": "1.0",
          "codexVersion": "1.0",
          "subcategories": {
            "Core Nodes": [
              "Helpers"
            ]
          }
        }
      },
      "group": "[\"input\"]",
      "defaults": {
        "name": "Note autocollante",
        "color": "#FFD233"
      },
      "iconData": {
        "icon": "sticky-note",
        "type": "icon"
      },
      "displayName": "Sticky Note",
      "typeVersion": 1,
      "nodeCategories": [
        {
          "id": 9,
          "name": "Core Nodes"
        }
      ]
    },
    {
      "id": 838,
      "icon": "fa:mouse-pointer",
      "name": "n8n-nodes-base.manualTrigger",
      "codex": {
        "data": {
          "resources": {
            "generic": [],
            "primaryDocumentation": [
              {
                "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.manualworkflowtrigger/"
              }
            ]
          },
          "categories": [
            "Core Nodes"
          ],
          "nodeVersion": "1.0",
          "codexVersion": "1.0"
        }
      },
      "group": "[\"trigger\"]",
      "defaults": {
        "name": "Lorsque vous cliquez sur ‚ÄòEx√©cuter le flux de travail‚Äô",
        "color": "#909298"
      },
      "iconData": {
        "icon": "mouse-pointer",
        "type": "icon"
      },
      "displayName": "Manual Trigger",
      "typeVersion": 1,
      "nodeCategories": [
        {
          "id": 9,
          "name": "Core Nodes"
        }
      ]
    }
  ],
  "views": 80,
  "recentViews": 6,
  "workflow": {
    "id": "fgQgNpXb2YQnLXjA",
    "meta": {
      "instanceId": "faa70e11b7175129a74fd834d3451fdc1862589b16d68ded03f91ca7b1ecca12"
    },
    "name": "n8n_8_Revit_IFC_DWG_Conversation_EXTRACT_Phase_with_Parse_XLSX",
    "tags": [],
    "nodes": [
      {
        "id": "fc85a630-5560-4345-bb4a-02cb8632bc80",
        "name": "Start - Click to begin",
        "type": "n8n-nodes-base.manualTrigger",
        "position": [
          -656,
          720
        ],
        "parameters": {},
        "typeVersion": 1
      },
      {
        "id": "26b97603-966f-4f03-a3bb-3e0d7a99bb2f",
        "name": "Setup - Define file paths",
        "type": "n8n-nodes-base.set",
        "position": [
          -432,
          720
        ],
        "parameters": {
          "options": {},
          "assignments": {
            "assignments": [
              {
                "id": "9cbd4ec9-df24-41e8-b47a-720a4cdb733b",
                "name": "path_to_revit_converter",
                "type": "string",
                "value": "C:\\Users\\Artem Boiko\\Desktop\\n8n\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\DDC_Converter_Revit\\RvtExporter.exe"
              },
              {
                "id": "aa834467-80fb-476a-bac1-6728478834f0",
                "name": "revit_file",
                "type": "string",
                "value": "C:\\Users\\Artem Boiko\\Desktop\\n8n\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto-main\\Sample_Projects\\2023 racbasicsampleproject.rvt"
              }
            ]
          }
        },
        "typeVersion": 3.4
      },
      {
        "id": "09957e4d-78e3-43c5-8c53-73bc70d8cdce",
        "name": "Extract - Run Revit converter",
        "type": "n8n-nodes-base.executeCommand",
        "position": [
          -176,
          720
        ],
        "parameters": {
          "command": "=\"{{$json[\"path_to_revit_converter\"]}}\" \"{{$json[\"revit_file\"]}}\""
        },
        "typeVersion": 1,
        "continueOnFail": true
      },
      {
        "id": "b7023aae-b316-47c0-be39-57938aa0c7a4",
        "name": "Check - Did extraction succeed?",
        "type": "n8n-nodes-base.if",
        "position": [
          16,
          720
        ],
        "parameters": {
          "options": {},
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "condition1",
                "operator": {
                  "type": "object",
                  "operation": "exists",
                  "rightType": "any"
                },
                "leftValue": "={{ $node[\"Extract - Run Revit converter\"].json.error }}",
                "rightValue": ""
              }
            ]
          }
        },
        "typeVersion": 2
      },
      {
        "id": "040addcf-4238-4e7a-a579-893eb4bca48c",
        "name": "Success - Create Excel filename",
        "type": "n8n-nodes-base.set",
        "position": [
          208,
          736
        ],
        "parameters": {
          "options": {},
          "assignments": {
            "assignments": [
              {
                "id": "9cbd4ec9-df24-41e8-b47a-720a4cdb733b",
                "name": "xlsx_filename",
                "type": "string",
                "value": "={{ $node[\"Setup - Define file paths\"].json[\"revit_file\"].slice(0, -4) + \"_rvt.xlsx\" }}"
              }
            ]
          }
        },
        "typeVersion": 3.4
      },
      {
        "id": "b04c4618-1565-4551-b154-b9d4d5aa6b39",
        "name": "Error - Show what went wrong",
        "type": "n8n-nodes-base.set",
        "position": [
          208,
          560
        ],
        "parameters": {
          "options": {},
          "assignments": {
            "assignments": [
              {
                "id": "error-message-id",
                "name": "error_message",
                "type": "string",
                "value": "=Extraction failed: {{ $node[\"Extract - Run Revit converter\"].json.error || \"Unknown error\" }}"
              },
              {
                "id": "error-code-id",
                "name": "error_code",
                "type": "number",
                "value": "={{ $node[\"Extract - Run Revit converter\"].json.code || -1 }}"
              }
            ]
          }
        },
        "typeVersion": 3.4
      },
      {
        "id": "6010e598-b0de-415b-b812-3dcbf656dd65",
        "name": "Extract - Read Excel file from disk",
        "type": "n8n-nodes-base.readBinaryFile",
        "position": [
          416,
          736
        ],
        "parameters": {
          "filePath": "={{ $json[\"xlsx_filename\"] }}"
        },
        "typeVersion": 1
      },
      {
        "id": "fabbaaf9-ec88-45eb-866d-e4a3f876a586",
        "name": "Extract - Parse Excel to data",
        "type": "n8n-nodes-base.spreadsheetFile",
        "position": [
          624,
          736
        ],
        "parameters": {
          "options": {}
        },
        "typeVersion": 1
      },
      {
        "id": "1865546f-1253-4ea3-9179-3ebd95ad5189",
        "name": "Extract Phase Note",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          -784,
          432
        ],
        "parameters": {
          "color": 6,
          "width": 552,
          "height": 504,
          "content": "## üî∑ EXTRACT Phase\n\n**E**xtract data from Revit file:\n1. Setup file paths\n2. Run Revit converter (RVT ‚Üí Excel)\n3. Check if conversion succeeded\n4. Read Excel file from disk\n5. Parse Excel into structured data"
        },
        "typeVersion": 1
      },
      {
        "id": "5c9a53b9-1818-4135-b442-f0643d97b645",
        "name": "Sticky Note",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          -800,
          256
        ],
        "parameters": {
          "color": 7,
          "width": 1908,
          "height": 712,
          "content": "# ETL with CAD (BIM)  \n**Extract. Transform. Load ‚Äî the future of data processing in construction**\n\nETL (Extract, Transform, Load) is a time-tested and universal approach at the heart of every mature digital infrastructure. When applied to CAD and BIM data, it becomes not just relevant ‚Äî but essential.\nETL is more than just a technical process. It‚Äôs a mindset shift ‚Äî one that takes BIM out of the siloed world of 3D modeling and into the open world of transparent, interoperable, and machine-readable data. It is this paradigm that powers platforms like [DataDrivenConstruction.io](https://datadrivenconstruction.io) and drives the future of digital transformation in the built environment.\n"
        },
        "typeVersion": 1
      },
      {
        "id": "3aa00356-09e3-4e4c-85d0-4a316a3877a2",
        "name": "Sticky Note1",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          752,
          112
        ],
        "parameters": {
          "width": 340,
          "height": 132,
          "content": "‚≠ê **If you find our tools helpful**, please **consider starring** our repository on [GitHub](https://github.com/datadrivenconstruction/cad2data-Revit-IFC-DWG-DGN-pipeline-with-conversion-validation-qto). \n\nYour support helps us improve and continue developing open solutions for the community!\n"
        },
        "typeVersion": 1
      },
      {
        "id": "af58225a-0ea4-4c6f-888e-49f1a8c6b319",
        "name": "Sticky Note2",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          -496,
          544
        ],
        "parameters": {
          "color": 4,
          "height": 368,
          "content": "## ‚¨áÔ∏è Only modify the variables here  \neverything else works automatically"
        },
        "typeVersion": 1
      },
      {
        "id": "14f11329-b954-4675-96e9-f357b1ff7caf",
        "name": "Extract Phase Note1",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          -208,
          432
        ],
        "parameters": {
          "color": 5,
          "width": 1288,
          "height": 504,
          "content": ""
        },
        "typeVersion": 1
      },
      {
        "id": "e2f8beb9-da5e-4a40-b0c5-869d2ee67c09",
        "name": "On the standard 3D View",
        "type": "n8n-nodes-base.if",
        "position": [
          832,
          736
        ],
        "parameters": {
          "conditions": {
            "boolean": [
              {
                "value1": "={{ $json['On the standard 3D View'] }}",
                "value2": true
              }
            ]
          }
        },
        "typeVersion": 1
      }
    ],
    "active": false,
    "pinData": {
      "Start - Click to begin": [
        {
          "json": {}
        }
      ]
    },
    "settings": {
      "executionOrder": "v1"
    },
    "versionId": "5a2ee85e-e76d-48be-850f-8ebb85cfd222",
    "connections": {
      "Start - Click to begin": {
        "main": [
          [
            {
              "node": "Setup - Define file paths",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "On the standard 3D View": {
        "main": [
          [],
          []
        ]
      },
      "Setup - Define file paths": {
        "main": [
          [
            {
              "node": "Extract - Run Revit converter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract - Parse Excel to data": {
        "main": [
          [
            {
              "node": "On the standard 3D View",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract - Run Revit converter": {
        "main": [
          [
            {
              "node": "Check - Did extraction succeed?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check - Did extraction succeed?": {
        "main": [
          [
            {
              "node": "Error - Show what went wrong",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Success - Create Excel filename",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Success - Create Excel filename": {
        "main": [
          [
            {
              "node": "Extract - Read Excel file from disk",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract - Read Excel file from disk": {
        "main": [
          [
            {
              "node": "Extract - Parse Excel to data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    }
  },
  "lastUpdatedBy": 29,
  "workflowInfo": {
    "nodeCount": 14,
    "nodeTypes": {
      "n8n-nodes-base.if": {
        "count": 2
      },
      "n8n-nodes-base.set": {
        "count": 3
      },
      "n8n-nodes-base.stickyNote": {
        "count": 5
      },
      "n8n-nodes-base.manualTrigger": {
        "count": 1
      },
      "n8n-nodes-base.executeCommand": {
        "count": 1
      },
      "n8n-nodes-base.readBinaryFile": {
        "count": 1
      },
      "n8n-nodes-base.spreadsheetFile": {
        "count": 1
      }
    }
  },
  "categories": [
    {
      "id": 5,
      "name": "Ing√©nierie"
    },
    {
      "id": 51,
      "name": "IA Multimodale"
    }
  ],
  "image": []
}