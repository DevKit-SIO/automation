{
  "id": 6134,
  "name": "Automate PostgreSQL & MySQL Database Management on Linux Servers",
  "totalViews": 167,
  "purchaseUrl": null,
  "user": {
    "name": "Oneclick AI Squad",
    "username": "oneclick-ai",
    "bio": "The AI Squad Initiative is a pioneering effort to build, automate and scale AI-powered workflows using n8n.io. Our mission is to help individuals and businesses integrate AI agents seamlessly into their daily operations  from automating tasks and enhancing productivity to creating innovative, intelligent solutions. We design modular, reusable AI workflow templates that empower creators, developers and teams to supercharge their automation with minimal effort and maximum impact.",
    "verified": true,
    "links": [
      "https://www.oneclickitsolution.com/"
    ],
    "avatar": "https://gravatar.com/avatar/848fca91367142f65f9e5c55d64e5c9952b160d7b060d103b52aa343c6bc7b3d?r=pg&d=retro&size=200"
  },
  "description": "This automated n8n workflow efficiently manages the setup, creation, and deletion of PostgreSQL and MySQL databases on a Linux server, executing tasks in approximately 10 seconds. It automates installation, configuration, and user management with support for remote access.\n\n## Core Elements\n- **Set Parameters** - Defines server details, database type, action, and credentials\n- **Type Check** - Confirms the selected database type\n- **PostgreSQL Action Check** - Identifies the action for PostgreSQL\n- **PostgreSQL Create Check** - Validates creation conditions for PostgreSQL\n- **Install PostgreSQL** - Sets up and configures PostgreSQL\n- **Create PostgreSQL DB** - Establishes a new PostgreSQL database with user access\n- **Delete PostgreSQL DB** - Removes a PostgreSQL database and user\n- **MySQL Action Check** - Identifies the action for MySQL\n- **MySQL Create Check** - Validates creation conditions for MySQL\n- **Install MySQL** - Sets up and configures MySQL\n- **Create MySQL DB** - Establishes a new MySQL database with user access\n- **Delete MySQL DB** - Removes a MySQL database and user\n- **Format Output** - Structures the final workflow output\n\n## Getting Started Guide\n- Import the workflow into n8n\n- Adjust parameters in the Set Parameters node\n- Execute the workflow\n- Confirm the database operation on the server\n\n## Necessary Requirements\n- SSH-enabled Linux server\n- Root-level access rights\n\n## Customization Options\n- Switch db_type between PostgreSQL and MySQL\n- Select action (install, create, delete) via the action parameter\n- Tailor database_name, db_user, and db_password as needed\n\n## Features\n- Install Database Server - Deploys PostgreSQL or MySQL with optimal configuration\n- Create Database - Generates new databases with assigned users and permissions\n- Delete Database - Eliminates databases and their associated users\n\n## Parameters to Configure\n- server_host: Your Linux server IP address\n- server_user: SSH username (typically 'root')\n- server_password: SSH password\n- db_type: Select 'postgresql' or 'mysql'\n- action: Select 'install', 'create', or 'delete'\n- database_name: Name of the database to create or delete\n- db_user: Database username\n- db_password: Database password\n\n## How to Use\n- Copy the JSON code from the artifact\n- Access your n8n workspace\n- Choose \"Import from JSON\" or \"+\" ‚Üí \"From JSON\"\n- Insert the JSON code\n- Set parameters in the \"Set Parameters\" node with your server information\n- Run the workflow\n\n## Workflow Actions\n- Install: Sets up the database server, enables remote access, and initializes the database\n- Create: Establishes a new database with a specific user\n- Delete: Erases the database and its associated user\n\n## The workflow automatically manages\n- Ubuntu/Debian package setup\n- Service initialization and configuration\n- Remote access setup\n- User and permission assignments\n- Authentication configuration\n\nUpdate the parameters in the \"Set Parameters\" node with your server specifics and execute the workflow!",
  "createdAt": "2025-07-18T10:22:17.708Z",
  "nodes": [
    {
      "id": 20,
      "icon": "fa:map-signs",
      "name": "n8n-nodes-base.if",
      "codex": {
        "data": {
          "alias": [
            "Router",
            "Filter",
            "Condition",
            "Logic",
            "Boolean",
            "Branch"
          ],
          "details": "The IF node can be used to implement binary conditional logic in your workflow. You can set up one-to-many conditions to evaluate each item of data being inputted into the node. That data will either evaluate to TRUE or FALSE and route out of the node accordingly.\n\nThis node has multiple types of conditions: Bool, String, Number, and Date & Time.",
          "resources": {
            "generic": [
              {
                "url": "https://n8n.io/blog/learn-to-automate-your-factorys-incident-reporting-a-step-by-step-guide/",
                "icon": "üè≠",
                "label": "Learn to Automate Your Factory's Incident Reporting: A Step by Step Guide"
              },
              {
                "url": "https://n8n.io/blog/2021-the-year-to-automate-the-new-you-with-n8n/",
                "icon": "‚òÄÔ∏è",
                "label": "2021: The Year to Automate the New You with n8n"
              },
              {
                "url": "https://n8n.io/blog/why-business-process-automation-with-n8n-can-change-your-daily-life/",
                "icon": "üß¨",
                "label": "Why business process automation with n8n can change your daily life"
              },
              {
                "url": "https://n8n.io/blog/create-a-toxic-language-detector-for-telegram/",
                "icon": "ü§¨",
                "label": "Create a toxic language detector for Telegram in 4 step"
              },
              {
                "url": "https://n8n.io/blog/no-code-ecommerce-workflow-automations/",
                "icon": "store",
                "label": "6 e-commerce workflows to power up your Shopify s"
              },
              {
                "url": "https://n8n.io/blog/how-to-build-a-low-code-self-hosted-url-shortener/",
                "icon": "üîó",
                "label": "How to build a low-code, self-hosted URL shortener in 3 steps"
              },
              {
                "url": "https://n8n.io/blog/automate-your-data-processing-pipeline-in-9-steps-with-n8n/",
                "icon": "‚öôÔ∏è",
                "label": "Automate your data processing pipeline in 9 steps"
              },
              {
                "url": "https://n8n.io/blog/how-to-get-started-with-crm-automation-and-no-code-workflow-ideas/",
                "icon": "üë•",
                "label": "How to get started with CRM automation (with 3 no-code workflow ideas"
              },
              {
                "url": "https://n8n.io/blog/5-tasks-you-can-automate-with-notion-api/",
                "icon": "‚ö°Ô∏è",
                "label": "5 tasks you can automate with the new Notion API "
              },
              {
                "url": "https://n8n.io/blog/automate-google-apps-for-productivity/",
                "icon": "üí°",
                "label": "15 Google apps you can combine and automate to increase productivity"
              },
              {
                "url": "https://n8n.io/blog/automation-for-maintainers-of-open-source-projects/",
                "icon": "üè∑Ô∏è",
                "label": "How to automatically manage contributions to open-source projects"
              },
              {
                "url": "https://n8n.io/blog/how-uproc-scraped-a-multi-page-website-with-a-low-code-workflow/",
                "icon": " üï∏Ô∏è",
                "label": "How uProc scraped a multi-page website with a low-code workflow"
              },
              {
                "url": "https://n8n.io/blog/5-workflow-automations-for-mattermost-that-we-love-at-n8n/",
                "icon": "ü§ñ",
                "label": "5 workflow automations for Mattermost that we love at n8n"
              },
              {
                "url": "https://n8n.io/blog/why-this-product-manager-loves-workflow-automation-with-n8n/",
                "icon": "üß†",
                "label": "Why this Product Manager loves workflow automation with n8n"
              },
              {
                "url": "https://n8n.io/blog/sending-automated-congratulations-with-google-sheets-twilio-and-n8n/",
                "icon": "üôå",
                "label": "Sending Automated Congratulations with Google Sheets, Twilio, and n8n "
              },
              {
                "url": "https://n8n.io/blog/how-to-set-up-a-ci-cd-pipeline-with-no-code/",
                "icon": "üé°",
                "label": "How to set up a no-code CI/CD pipeline with GitHub and TravisCI"
              },
              {
                "url": "https://n8n.io/blog/benefits-of-automation-and-n8n-an-interview-with-hubspots-hugh-durkin/",
                "icon": "üéñ",
                "label": "Benefits of automation and n8n: An interview with HubSpot's Hugh Durkin"
              },
              {
                "url": "https://n8n.io/blog/aws-workflow-automation/",
                "label": "7 no-code workflow automations for Amazon Web Services"
              }
            ],
            "primaryDocumentation": [
              {
                "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.if/"
              }
            ]
          },
          "categories": [
            "Core Nodes"
          ],
          "nodeVersion": "1.0",
          "codexVersion": "1.0",
          "subcategories": {
            "Core Nodes": [
              "Flow"
            ]
          }
        }
      },
      "group": "[\"transform\"]",
      "defaults": {
        "name": "If",
        "color": "#408000"
      },
      "iconData": {
        "icon": "map-signs",
        "type": "icon"
      },
      "displayName": "If",
      "typeVersion": 2,
      "nodeCategories": [
        {
          "id": 9,
          "name": "Core Nodes"
        }
      ]
    },
    {
      "id": 38,
      "icon": "fa:pen",
      "name": "n8n-nodes-base.set",
      "codex": {
        "data": {
          "alias": [
            "Set",
            "JS",
            "JSON",
            "Filter",
            "Transform",
            "Map"
          ],
          "resources": {
            "generic": [
              {
                "url": "https://n8n.io/blog/learn-to-automate-your-factorys-incident-reporting-a-step-by-step-guide/",
                "icon": "üè≠",
                "label": "Learn to Automate Your Factory's Incident Reporting: A Step by Step Guide"
              },
              {
                "url": "https://n8n.io/blog/2021-the-year-to-automate-the-new-you-with-n8n/",
                "icon": "‚òÄÔ∏è",
                "label": "2021: The Year to Automate the New You with n8n"
              },
              {
                "url": "https://n8n.io/blog/automatically-pulling-and-visualizing-data-with-n8n/",
                "icon": "üìà",
                "label": "Automatically pulling and visualizing data with n8n"
              },
              {
                "url": "https://n8n.io/blog/database-monitoring-and-alerting-with-n8n/",
                "icon": "üì°",
                "label": "Database Monitoring and Alerting with n8n"
              },
              {
                "url": "https://n8n.io/blog/automatically-adding-expense-receipts-to-google-sheets-with-telegram-mindee-twilio-and-n8n/",
                "icon": "üßæ",
                "label": "Automatically Adding Expense Receipts to Google Sheets with Telegram, Mindee, Twilio, and n8n"
              },
              {
                "url": "https://n8n.io/blog/no-code-ecommerce-workflow-automations/",
                "icon": "store",
                "label": "6 e-commerce workflows to power up your Shopify s"
              },
              {
                "url": "https://n8n.io/blog/how-to-build-a-low-code-self-hosted-url-shortener/",
                "icon": "üîó",
                "label": "How to build a low-code, self-hosted URL shortener in 3 steps"
              },
              {
                "url": "https://n8n.io/blog/automate-your-data-processing-pipeline-in-9-steps-with-n8n/",
                "icon": "‚öôÔ∏è",
                "label": "Automate your data processing pipeline in 9 steps"
              },
              {
                "url": "https://n8n.io/blog/how-to-get-started-with-crm-automation-and-no-code-workflow-ideas/",
                "icon": "üë•",
                "label": "How to get started with CRM automation (with 3 no-code workflow ideas"
              },
              {
                "url": "https://n8n.io/blog/5-tasks-you-can-automate-with-notion-api/",
                "icon": "‚ö°Ô∏è",
                "label": "5 tasks you can automate with the new Notion API "
              },
              {
                "url": "https://n8n.io/blog/automate-google-apps-for-productivity/",
                "icon": "üí°",
                "label": "15 Google apps you can combine and automate to increase productivity"
              },
              {
                "url": "https://n8n.io/blog/how-uproc-scraped-a-multi-page-website-with-a-low-code-workflow/",
                "icon": " üï∏Ô∏è",
                "label": "How uProc scraped a multi-page website with a low-code workflow"
              },
              {
                "url": "https://n8n.io/blog/building-an-expense-tracking-app-in-10-minutes/",
                "icon": "üì±",
                "label": "Building an expense tracking app in 10 minutes"
              },
              {
                "url": "https://n8n.io/blog/the-ultimate-guide-to-automate-your-video-collaboration-with-whereby-mattermost-and-n8n/",
                "icon": "üìπ",
                "label": "The ultimate guide to automate your video collaboration with Whereby, Mattermost, and n8n"
              },
              {
                "url": "https://n8n.io/blog/5-workflow-automations-for-mattermost-that-we-love-at-n8n/",
                "icon": "ü§ñ",
                "label": "5 workflow automations for Mattermost that we love at n8n"
              },
              {
                "url": "https://n8n.io/blog/learn-to-build-powerful-api-endpoints-using-webhooks/",
                "icon": "üß∞",
                "label": "Learn to Build Powerful API Endpoints Using Webhooks"
              },
              {
                "url": "https://n8n.io/blog/how-a-membership-development-manager-automates-his-work-and-investments/",
                "icon": "üìà",
                "label": "How a Membership Development Manager automates his work and investments"
              },
              {
                "url": "https://n8n.io/blog/a-low-code-bitcoin-ticker-built-with-questdb-and-n8n-io/",
                "icon": "üìà",
                "label": "A low-code bitcoin ticker built with QuestDB and n8n.io"
              },
              {
                "url": "https://n8n.io/blog/how-to-set-up-a-ci-cd-pipeline-with-no-code/",
                "icon": "üé°",
                "label": "How to set up a no-code CI/CD pipeline with GitHub and TravisCI"
              },
              {
                "url": "https://n8n.io/blog/benefits-of-automation-and-n8n-an-interview-with-hubspots-hugh-durkin/",
                "icon": "üéñ",
                "label": "Benefits of automation and n8n: An interview with HubSpot's Hugh Durkin"
              },
              {
                "url": "https://n8n.io/blog/how-goomer-automated-their-operations-with-over-200-n8n-workflows/",
                "icon": "üõµ",
                "label": "How Goomer automated their operations with over 200 n8n workflows"
              },
              {
                "url": "https://n8n.io/blog/aws-workflow-automation/",
                "label": "7 no-code workflow automations for Amazon Web Services"
              }
            ],
            "primaryDocumentation": [
              {
                "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/"
              }
            ]
          },
          "categories": [
            "Core Nodes"
          ],
          "nodeVersion": "1.0",
          "codexVersion": "1.0",
          "subcategories": {
            "Core Nodes": [
              "Data Transformation"
            ]
          }
        }
      },
      "group": "[\"input\"]",
      "defaults": {
        "name": "Edit Fields"
      },
      "iconData": {
        "icon": "pen",
        "type": "icon"
      },
      "displayName": "Edit Fields (Set)",
      "typeVersion": 3,
      "nodeCategories": [
        {
          "id": 9,
          "name": "Core Nodes"
        }
      ]
    },
    {
      "id": 490,
      "icon": "fa:terminal",
      "name": "n8n-nodes-base.ssh",
      "codex": {
        "data": {
          "alias": [
            "remote"
          ],
          "resources": {
            "primaryDocumentation": [
              {
                "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.ssh/"
              }
            ]
          },
          "categories": [
            "Core Nodes",
            "Development"
          ],
          "nodeVersion": "1.0",
          "codexVersion": "1.0",
          "subcategories": [
            "Helpers"
          ]
        }
      },
      "group": "[\"input\"]",
      "defaults": {
        "name": "SSH",
        "color": "#000000"
      },
      "iconData": {
        "icon": "terminal",
        "type": "icon"
      },
      "displayName": "SSH",
      "typeVersion": 1,
      "nodeCategories": [
        {
          "id": 5,
          "name": "Development"
        },
        {
          "id": 9,
          "name": "Core Nodes"
        }
      ]
    },
    {
      "id": 565,
      "icon": "fa:sticky-note",
      "name": "n8n-nodes-base.stickyNote",
      "codex": {
        "data": {
          "alias": [
            "Comments",
            "Notes",
            "Sticky"
          ],
          "categories": [
            "Core Nodes"
          ],
          "nodeVersion": "1.0",
          "codexVersion": "1.0",
          "subcategories": {
            "Core Nodes": [
              "Helpers"
            ]
          }
        }
      },
      "group": "[\"input\"]",
      "defaults": {
        "name": "Sticky Note",
        "color": "#FFD233"
      },
      "iconData": {
        "icon": "sticky-note",
        "type": "icon"
      },
      "displayName": "Sticky Note",
      "typeVersion": 1,
      "nodeCategories": [
        {
          "id": 9,
          "name": "Core Nodes"
        }
      ]
    },
    {
      "id": 838,
      "icon": "fa:mouse-pointer",
      "name": "n8n-nodes-base.manualTrigger",
      "codex": {
        "data": {
          "resources": {
            "generic": [],
            "primaryDocumentation": [
              {
                "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.manualworkflowtrigger/"
              }
            ]
          },
          "categories": [
            "Core Nodes"
          ],
          "nodeVersion": "1.0",
          "codexVersion": "1.0"
        }
      },
      "group": "[\"trigger\"]",
      "defaults": {
        "name": "When clicking ‚ÄòExecute workflow‚Äô",
        "color": "#909298"
      },
      "iconData": {
        "icon": "mouse-pointer",
        "type": "icon"
      },
      "displayName": "Manual Trigger",
      "typeVersion": 1,
      "nodeCategories": [
        {
          "id": 9,
          "name": "Core Nodes"
        }
      ]
    }
  ],
  "views": 167,
  "recentViews": 1,
  "workflow": {
    "id": "OnGUB1cHxzP09UTz",
    "meta": {
      "instanceId": "dd69efaf8212c74ad206700d104739d3329588a6f3f8381a46a481f34c9cc281",
      "templateCredsSetupCompleted": true
    },
    "name": "Automate PostgreSQL & MySQL Setup, Creation & Deletion in Just 10 Seconds",
    "tags": [],
    "nodes": [
      {
        "id": "f024ece1-0378-4dbb-a1b7-06bf598a04de",
        "name": "Start",
        "type": "n8n-nodes-base.manualTrigger",
        "position": [
          -760,
          480
        ],
        "parameters": {},
        "typeVersion": 1
      },
      {
        "id": "4bd36d6f-a312-4ff2-8b6f-86a6769f2588",
        "name": "Set Parameters",
        "type": "n8n-nodes-base.set",
        "position": [
          -540,
          480
        ],
        "parameters": {
          "values": {
            "string": [
              {
                "name": "server_host",
                "value": "={{ $json.server_host || '192.168.1.100' }}"
              },
              {
                "name": "server_user",
                "value": "{{ $json.server_user || 'root' }}"
              },
              {
                "name": "server_password",
                "value": "{{ $json.server_password || 'your_password' }}"
              },
              {
                "name": "db_type",
                "value": "={{ $json.db_type || 'postgresql' }}"
              },
              {
                "name": "action",
                "value": "={{ $json.action || 'install' }}"
              },
              {
                "name": "database_name",
                "value": "={{ $json.database_name || 'mydb' }}"
              },
              {
                "name": "db_user",
                "value": "{{ $json.db_user || 'dbuser' }}"
              },
              {
                "name": "db_password",
                "value": "{{ $json.db_password || 'dbpass123' }}"
              }
            ]
          },
          "options": {}
        },
        "typeVersion": 1
      },
      {
        "id": "8d23250e-4538-4b64-8fa4-a5cdabadc6ac",
        "name": "Database Type Check",
        "type": "n8n-nodes-base.if",
        "position": [
          -320,
          480
        ],
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.db_type }}",
                "value2": "postgresql"
              }
            ]
          }
        },
        "typeVersion": 1
      },
      {
        "id": "f49751e8-cc9c-45bc-b677-c11919054be2",
        "name": "PostgreSQL Action Check",
        "type": "n8n-nodes-base.if",
        "position": [
          -100,
          180
        ],
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.action }}",
                "value2": "install"
              }
            ]
          }
        },
        "typeVersion": 1
      },
      {
        "id": "bad68834-e9b1-406e-8a25-4a82d845b9eb",
        "name": "MySQL Action Check",
        "type": "n8n-nodes-base.if",
        "position": [
          -100,
          780
        ],
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.action }}",
                "value2": "install"
              }
            ]
          }
        },
        "typeVersion": 1
      },
      {
        "id": "b4d41f1b-8d44-4725-87d6-72dd5d48d81a",
        "name": "Install PostgreSQL",
        "type": "n8n-nodes-base.ssh",
        "position": [
          340,
          -20
        ],
        "parameters": {
          "command": "#!/bin/bash\n\n# Install PostgreSQL\necho \"Installing PostgreSQL...\"\napt update -y\napt install -y postgresql postgresql-contrib\n\n# Start and enable PostgreSQL\nsystemctl start postgresql\nsystemctl enable postgresql\n\n# Configure PostgreSQL\nsudo -u postgres psql -c \"ALTER USER postgres PASSWORD '{{ $json.db_password }}';\"\n\n# Configure pg_hba.conf for password authentication\nsed -i \"s/#listen_addresses = 'localhost'/listen_addresses = '*'/g\" /etc/postgresql/*/main/postgresql.conf\necho \"host all all 0.0.0.0/0 md5\" >> /etc/postgresql/*/main/pg_hba.conf\n\n# Restart PostgreSQL\nsystemctl restart postgresql\n\n# Create database and user\nsudo -u postgres createdb {{ $json.database_name }}\nsudo -u postgres psql -c \"CREATE USER {{ $json.db_user }} WITH PASSWORD '{{ $json.db_password }}';\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE {{ $json.database_name }} TO {{ $json.db_user }};\"\n\necho \"PostgreSQL installation and setup completed!\"\necho \"Database: {{ $json.database_name }}\"\necho \"User: {{ $json.db_user }}\"\necho \"Connection: psql -h {{ $json.server_host }} -U {{ $json.db_user }} -d {{ $json.database_name }}\"",
          "authentication": "privateKey"
        },
        "credentials": {
          "sshPrivateKey": {
            "id": "ilPh8oO4GfSlc0Qy",
            "name": "SSH Password account - test "
          }
        },
        "typeVersion": 1
      },
      {
        "id": "43acaf1f-beec-4d5d-9292-139626d04b05",
        "name": "Install MySQL",
        "type": "n8n-nodes-base.ssh",
        "position": [
          340,
          580
        ],
        "parameters": {
          "command": "#!/bin/bash\n\n# Install MySQL\necho \"Installing MySQL...\"\napt update -y\n\n# Set MySQL root password non-interactively\ndebconf-set-selections <<< \"mysql-server mysql-server/root_password password {{ $json.db_password }}\"\ndebconf-set-selections <<< \"mysql-server mysql-server/root_password_again password {{ $json.db_password }}\"\n\napt install -y mysql-server\n\n# Start and enable MySQL\nsystemctl start mysql\nsystemctl enable mysql\n\n# Configure MySQL for remote connections\nsed -i \"s/bind-address.*/bind-address = 0.0.0.0/g\" /etc/mysql/mysql.conf.d/mysqld.cnf\n\n# Restart MySQL\nsystemctl restart mysql\n\n# Create database and user\nmysql -u root -p{{ $json.db_password }} -e \"CREATE DATABASE {{ $json.database_name }};\"\nmysql -u root -p{{ $json.db_password }} -e \"CREATE USER '{{ $json.db_user }}'@'%' IDENTIFIED BY '{{ $json.db_password }}';\"\nmysql -u root -p{{ $json.db_password }} -e \"GRANT ALL PRIVILEGES ON {{ $json.database_name }}.* TO '{{ $json.db_user }}'@'%';\"\nmysql -u root -p{{ $json.db_password }} -e \"FLUSH PRIVILEGES;\"\n\necho \"MySQL installation and setup completed!\"\necho \"Database: {{ $json.database_name }}\"\necho \"User: {{ $json.db_user }}\"\necho \"Connection: mysql -h {{ $json.server_host }} -u {{ $json.db_user }} -p{{ $json.db_password }} {{ $json.database_name }}\"",
          "authentication": "privateKey"
        },
        "credentials": {
          "sshPrivateKey": {
            "id": "ilPh8oO4GfSlc0Qy",
            "name": "SSH Password account - test "
          }
        },
        "typeVersion": 1
      },
      {
        "id": "5315c681-2677-441b-8010-f7a742849b83",
        "name": "PostgreSQL Create Check",
        "type": "n8n-nodes-base.if",
        "position": [
          120,
          280
        ],
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.action }}",
                "value2": "create"
              }
            ]
          }
        },
        "typeVersion": 1
      },
      {
        "id": "1fe28fb8-1dd9-488d-a7cf-bc47658d745e",
        "name": "MySQL Create Check",
        "type": "n8n-nodes-base.if",
        "position": [
          120,
          880
        ],
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.action }}",
                "value2": "create"
              }
            ]
          }
        },
        "typeVersion": 1
      },
      {
        "id": "b65b1c99-ec5b-486c-8513-0b20ad54186e",
        "name": "Create PostgreSQL DB",
        "type": "n8n-nodes-base.ssh",
        "position": [
          340,
          180
        ],
        "parameters": {
          "command": "#!/bin/bash\n\n# Create PostgreSQL database\necho \"Creating PostgreSQL database: {{ $json.database_name }}\"\n\nsudo -u postgres createdb {{ $json.database_name }}\nsudo -u postgres psql -c \"CREATE USER {{ $json.db_user }} WITH PASSWORD '{{ $json.db_password }}';\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE {{ $json.database_name }} TO {{ $json.db_user }};\"\n\necho \"PostgreSQL database created successfully!\"\necho \"Database: {{ $json.database_name }}\"\necho \"User: {{ $json.db_user }}\"",
          "authentication": "privateKey"
        },
        "credentials": {
          "sshPrivateKey": {
            "id": "ilPh8oO4GfSlc0Qy",
            "name": "SSH Password account - test "
          }
        },
        "typeVersion": 1
      },
      {
        "id": "aada1dd3-d236-4fe9-8ced-02d1ea20ef46",
        "name": "Create MySQL DB",
        "type": "n8n-nodes-base.ssh",
        "position": [
          340,
          780
        ],
        "parameters": {
          "command": "#!/bin/bash\n\n# Create MySQL database\necho \"Creating MySQL database: {{ $json.database_name }}\"\n\nmysql -u root -p{{ $json.db_password }} -e \"CREATE DATABASE {{ $json.database_name }};\"\nmysql -u root -p{{ $json.db_password }} -e \"CREATE USER '{{ $json.db_user }}'@'%' IDENTIFIED BY '{{ $json.db_password }}';\"\nmysql -u root -p{{ $json.db_password }} -e \"GRANT ALL PRIVILEGES ON {{ $json.database_name }}.* TO '{{ $json.db_user }}'@'%';\"\nmysql -u root -p{{ $json.db_password }} -e \"FLUSH PRIVILEGES;\"\n\necho \"MySQL database created successfully!\"\necho \"Database: {{ $json.database_name }}\"\necho \"User: {{ $json.db_user }}\"",
          "authentication": "privateKey"
        },
        "credentials": {
          "sshPrivateKey": {
            "id": "ilPh8oO4GfSlc0Qy",
            "name": "SSH Password account - test "
          }
        },
        "typeVersion": 1
      },
      {
        "id": "a77b9367-1eec-40c9-b636-9bd7535ecf7a",
        "name": "Delete PostgreSQL DB",
        "type": "n8n-nodes-base.ssh",
        "position": [
          340,
          380
        ],
        "parameters": {
          "command": "#!/bin/bash\n\n# Delete PostgreSQL database\necho \"Deleting PostgreSQL database: {{ $json.database_name }}\"\n\nsudo -u postgres dropdb {{ $json.database_name }}\nsudo -u postgres psql -c \"DROP USER IF EXISTS {{ $json.db_user }};\"\n\necho \"PostgreSQL database deleted successfully!\"\necho \"Database: {{ $json.database_name }} (deleted)\"\necho \"User: {{ $json.db_user }} (deleted)\"",
          "authentication": "privateKey"
        },
        "credentials": {
          "sshPrivateKey": {
            "id": "ilPh8oO4GfSlc0Qy",
            "name": "SSH Password account - test "
          }
        },
        "typeVersion": 1
      },
      {
        "id": "37b5c6e2-94f6-440f-b32d-6454e5178bfc",
        "name": "Delete MySQL DB",
        "type": "n8n-nodes-base.ssh",
        "position": [
          340,
          980
        ],
        "parameters": {
          "command": "#!/bin/bash\n\n# Delete MySQL database\necho \"Deleting MySQL database: {{ $json.database_name }}\"\n\nmysql -u root -p{{ $json.db_password }} -e \"DROP DATABASE IF EXISTS {{ $json.database_name }};\"\nmysql -u root -p{{ $json.db_password }} -e \"DROP USER IF EXISTS '{{ $json.db_user }}'@'%';\"\nmysql -u root -p{{ $json.db_password }} -e \"FLUSH PRIVILEGES;\"\n\necho \"MySQL database deleted successfully!\"\necho \"Database: {{ $json.database_name }} (deleted)\"\necho \"User: {{ $json.db_user }} (deleted)\"",
          "authentication": "privateKey"
        },
        "credentials": {
          "sshPrivateKey": {
            "id": "ilPh8oO4GfSlc0Qy",
            "name": "SSH Password account - test "
          }
        },
        "typeVersion": 1
      },
      {
        "id": "e23dbe7f-2bb3-4ba2-848a-e85688a05124",
        "name": "Format Output",
        "type": "n8n-nodes-base.set",
        "position": [
          560,
          480
        ],
        "parameters": {
          "values": {
            "string": [
              {
                "name": "result",
                "value": "={{ $json.stdout }}"
              },
              {
                "name": "status",
                "value": "success"
              },
              {
                "name": "action_performed",
                "value": "={{ $('Set Parameters').item.json.action }}"
              },
              {
                "name": "database_type",
                "value": "={{ $('Set Parameters').item.json.db_type }}"
              },
              {
                "name": "database_name",
                "value": "={{ $('Set Parameters').item.json.database_name }}"
              }
            ]
          },
          "options": {}
        },
        "typeVersion": 1
      },
      {
        "id": "30cb203f-a298-41c9-b897-fc5c33178aa4",
        "name": "Sticky Note",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          -1120,
          -20
        ],
        "parameters": {
          "width": 620,
          "height": 360,
          "content": "## Core Elements\n- **Set Parameters** - Defines server details, database type, action, and credentials\n- **Type Check** - Confirms the selected database type\n- **PostgreSQL Action Check** - Identifies the action for PostgreSQL\n- **PostgreSQL Create Check** - Validates creation conditions for PostgreSQL\n- **Install PostgreSQL** - Sets up and configures PostgreSQL\n- **Create PostgreSQL DB** - Establishes a new PostgreSQL database with user access\n- **Delete PostgreSQL DB** - Removes a PostgreSQL database and user\n- **MySQL Action Check** - Identifies the action for MySQL\n- **MySQL Create Check** - Validates creation conditions for MySQL\n- **Install MySQL** - Sets up and configures MySQL\n- **Create MySQL DB** - Establishes a new MySQL database with user access\n- **Delete MySQL DB** - Removes a MySQL database and user\n- **Format Output** - Structures the final workflow output"
        },
        "typeVersion": 1
      }
    ],
    "active": false,
    "pinData": {},
    "settings": {
      "executionOrder": "v1"
    },
    "versionId": "a13a1931-c209-4f37-ab8c-bdc3c35b8fd4",
    "connections": {
      "Start": {
        "main": [
          [
            {
              "node": "Set Parameters",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Install MySQL": {
        "main": [
          [
            {
              "node": "Format Output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Parameters": {
        "main": [
          [
            {
              "node": "Database Type Check",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create MySQL DB": {
        "main": [
          [
            {
              "node": "Format Output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Delete MySQL DB": {
        "main": [
          [
            {
              "node": "Format Output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Install PostgreSQL": {
        "main": [
          [
            {
              "node": "Format Output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MySQL Action Check": {
        "main": [
          [
            {
              "node": "Install MySQL",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "MySQL Create Check",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MySQL Create Check": {
        "main": [
          [
            {
              "node": "Create MySQL DB",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Delete MySQL DB",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Database Type Check": {
        "main": [
          [
            {
              "node": "PostgreSQL Action Check",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "MySQL Action Check",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create PostgreSQL DB": {
        "main": [
          [
            {
              "node": "Format Output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Delete PostgreSQL DB": {
        "main": [
          [
            {
              "node": "Format Output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "PostgreSQL Action Check": {
        "main": [
          [
            {
              "node": "Install PostgreSQL",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "PostgreSQL Create Check",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "PostgreSQL Create Check": {
        "main": [
          [
            {
              "node": "Create PostgreSQL DB",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Delete PostgreSQL DB",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    }
  },
  "lastUpdatedBy": 29,
  "workflowInfo": {
    "nodeCount": 15,
    "nodeTypes": {
      "n8n-nodes-base.if": {
        "count": 5
      },
      "n8n-nodes-base.set": {
        "count": 2
      },
      "n8n-nodes-base.ssh": {
        "count": 6
      },
      "n8n-nodes-base.stickyNote": {
        "count": 1
      },
      "n8n-nodes-base.manualTrigger": {
        "count": 1
      }
    }
  },
  "categories": [
    {
      "id": 16,
      "name": "DevOps"
    }
  ],
  "image": []
}